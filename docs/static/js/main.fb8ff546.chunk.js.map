{"version":3,"sources":["components/Header.js","components/Filters.js","components/PokeTile.js","components/PokeGrid.js","hooks/useDidUpdateEffect.js","components/Main.js","App.js","index.js"],"names":["Header","AppBar","position","Toolbar","Typography","variant","component","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","Filters","properties","selectedCategory","selectedProperty","setSelectedCategory","setSelectedProperty","classes","renderCategories","name","endpoint","map","category","MenuItem","value","key","renderProperties","property","url","Box","p","display","justifyContent","FormControl","className","InputLabel","id","Select","labelId","onChange","event","target","disabled","length","card","textAlign","width","image","height","statLabel","fontSize","fontWeight","statValue","marginTop","marginBottom","letterSpacing","typeChip","PokeTile","useState","data","setData","useEffect","fetch","then","response","json","renderTypes","types","type","index","Chip","color","label","Grid","item","boxShadow","borderRadius","Card","alt","src","sprites","front_default","Divider","light","pt","pb","flex","weight","flexWrap","PokeGrid","results","pageCapacity","page","renderPokeTiles","slice","result","container","justify","useDidUpdateEffect","fn","inputs","didMountRef","useRef","current","Main","setResults","setPage","count","setCount","setProperties","pageCount","Math","ceil","fetchBasicData","pokemon_species","m","mb","mt","Pagination","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb8ff546.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nfunction Header() {\r\n    return (\r\n        <AppBar position='static'>\r\n            <Toolbar>\r\n                <Typography variant='h5' component='h1'>\r\n                    Pokedex\r\n                 </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120\r\n    }\r\n}))\r\n\r\nfunction Filters({ properties, selectedCategory, selectedProperty, setSelectedCategory, setSelectedProperty }) {\r\n    const classes = useStyles()\r\n\r\n    const categories = [\r\n        {\r\n            name: 'color',\r\n            endpoint: 'pokemon-color'\r\n        },\r\n        {\r\n            name: 'shape',\r\n            endpoint: 'pokemon-shape'\r\n        },\r\n        {\r\n            name: 'habitat',\r\n            endpoint: 'pokemon-habitat'\r\n        }\r\n    ]\r\n\r\n    const renderCategories = categories.map(category =>\r\n        <MenuItem value={category.endpoint} key={category.name}> {category.name} </MenuItem>\r\n    )\r\n\r\n    const renderProperties = properties.map(property =>\r\n        <MenuItem value={property.url} key={property.name}> {property.name} </MenuItem>\r\n    )\r\n\r\n    return (\r\n        <Box p={1} display='flex' justifyContent='center'>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id='categories-label'>Category</InputLabel>\r\n                <Select\r\n                    labelId='categories-label'\r\n                    value={selectedCategory}\r\n                    onChange={(event) => setSelectedCategory(event.target.value)}\r\n                >\r\n                    <MenuItem value=''>None</MenuItem>\r\n                    {renderCategories}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id='properties-label'>Property</InputLabel>\r\n                <Select\r\n                    labelId='properties-label'\r\n                    value={selectedProperty}\r\n                    onChange={(event) => setSelectedProperty(event.target.value)}\r\n                    disabled={properties.length === 0}\r\n                >\r\n                    <MenuItem value=''>None</MenuItem>\r\n                    {renderProperties}\r\n                </Select>\r\n            </FormControl>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Filters\r\n","import React, { useState, useEffect } from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Box from '@material-ui/core/Box'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    card: {\r\n        textAlign: 'center',\r\n        width: '200px'\r\n    },\r\n    image: {\r\n        width: '96px',\r\n        height: '96px'\r\n    },\r\n    statLabel: {\r\n        fontSize: '0.75rem',\r\n        fontWeight: 500,\r\n        margin: 0\r\n    },\r\n    statValue: {\r\n        fontSize: '1.25rem',\r\n        fontWeight: 'bold',\r\n        marginTop: 12,\r\n        marginBottom: 4,\r\n        letterSpacing: '1px'\r\n    },\r\n    typeChip: {\r\n        margin: 5\r\n    }\r\n}))\r\n\r\nfunction PokeTile({ name }) {\r\n    const [data, setData] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetch(`https://pokeapi.co/api/v2/pokemon/${name}`)\r\n            .then(response => response.json())\r\n            .then(response => setData(response))\r\n    }, [name])\r\n\r\n    const classes = useStyles()\r\n\r\n    if (data) {\r\n        const renderTypes = data.types.map((type, index) =>\r\n            <Chip color='primary' label={type.type.name} key={index} className={classes.typeChip} />\r\n        )\r\n\r\n        return (\r\n            <Grid item >\r\n                <Box boxShadow={3} borderRadius={3}>\r\n                    <Card className={classes.card} >\r\n\r\n                        <img alt={data.name} src={data.sprites.front_default} className={classes.image} />\r\n\r\n                        <Typography variant='subtitle1'>\r\n                            {data.name}\r\n                        </Typography>\r\n\r\n                        <Divider light />\r\n\r\n                        <Box display='flex' pt={2} pb={1}>\r\n                            <Box flex='auto'>\r\n                                <Typography className={classes.statLabel}>height</Typography>\r\n                                <Typography className={classes.statValue}>{data.height / 10}m</Typography>\r\n                            </Box>\r\n\r\n                            <Box flex='auto'>\r\n                                <Typography className={classes.statLabel}>weight</Typography>\r\n                                <Typography className={classes.statValue}>{data.weight / 10}kg</Typography>\r\n                            </Box>\r\n                        </Box>\r\n\r\n                        <Divider light />\r\n\r\n                        <Box display='flex' justifyContent='center' flexWrap='wrap' pt={2} pb={1}>\r\n                            {renderTypes}\r\n                        </Box>\r\n                    </Card>\r\n                </Box>\r\n            </Grid>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default PokeTile\r\n","import React from 'react'\r\nimport PokeTile from './PokeTile'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nfunction PokeGrid({ results, pageCapacity, page }) {\r\n    const renderPokeTiles = results\r\n        .slice((page - 1) * pageCapacity, page * pageCapacity)\r\n        .map((result, index) => <PokeTile key={index} name={result.name} />)\r\n\r\n    return (\r\n        <Box p={1} >\r\n            <Grid container justify='center' spacing={2} >\r\n                {renderPokeTiles}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PokeGrid\r\n","import { useRef, useEffect } from 'react'\r\n\r\nfunction useDidUpdateEffect(fn, inputs) {\r\n    const didMountRef = useRef(false)\r\n\r\n    useEffect(() => {\r\n        if (didMountRef.current)\r\n            fn()\r\n        else\r\n            didMountRef.current = true\r\n    }, inputs)\r\n}\r\n\r\nexport default useDidUpdateEffect\r\n","import React, { useState, useEffect } from 'react'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport Box from '@material-ui/core/Box'\r\nimport Filters from './Filters'\r\nimport PokeGrid from './PokeGrid'\r\nimport useDidUpdateEffect from '../hooks/useDidUpdateEffect'\r\n\r\nfunction Main() {\r\n    const [results, setResults] = useState([])\r\n    const [page, setPage] = useState(1)\r\n    const [count, setCount] = useState(0)\r\n    const [selectedCategory, setSelectedCategory] = useState('')\r\n    const [selectedProperty, setSelectedProperty] = useState('')\r\n    const [properties, setProperties] = useState([])\r\n\r\n    const pageCapacity = 20\r\n    const pageCount = Math.ceil(count / pageCapacity)\r\n\r\n    useEffect(() => {\r\n        fetchBasicData()\r\n    }, [])\r\n\r\n    useDidUpdateEffect(() => {\r\n        if (selectedCategory) {\r\n            fetch(`https://pokeapi.co/api/v2/${selectedCategory}`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setProperties(data.results)\r\n                })\r\n        } else {\r\n            setProperties([])\r\n            fetchBasicData()\r\n        }\r\n    }, [selectedCategory])\r\n\r\n    useDidUpdateEffect(() => {\r\n        if (selectedProperty) {\r\n            fetch(selectedProperty)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setResults(data.pokemon_species)\r\n                    setCount(data.pokemon_species.length)\r\n                    setPage(1)\r\n                })\r\n        } else {\r\n            fetchBasicData()\r\n        }\r\n    }, [selectedProperty])\r\n\r\n\r\n    function fetchBasicData() {\r\n        fetch('https://pokeapi.co/api/v2/pokemon?offset=0&limit=964')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setResults(data.results)\r\n                setCount(data.count)\r\n                setPage(1)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <Filters\r\n                properties={properties}\r\n                selectedCategory={selectedCategory}\r\n                selectedProperty={selectedProperty}\r\n                setSelectedCategory={setSelectedCategory}\r\n                setSelectedProperty={setSelectedProperty}\r\n            />\r\n\r\n            <PokeGrid results={results} page={page} pageCapacity={pageCapacity} />\r\n\r\n            <Box m={1} mb={2} mt={2} display='flex' justifyContent='center'>\r\n                <Pagination\r\n                    count={pageCount}\r\n                    color='primary'\r\n                    page={page}\r\n                    onChange={(event, page) => setPage(page)}\r\n                />\r\n            </Box>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\nimport Header from './components/Header'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Main />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style.scss'\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}